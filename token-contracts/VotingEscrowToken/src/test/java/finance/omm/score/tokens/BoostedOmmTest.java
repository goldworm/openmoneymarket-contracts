/*
 * Copyright (c) 2021-2021 Balanced.network.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package finance.omm.score.tokens;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import com.iconloop.score.test.Account;
import com.iconloop.score.test.Score;
import com.iconloop.score.test.ServiceManager;
import java.math.BigInteger;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class BoostedOmmTest extends AbstractBOMMTest {

    private static final ServiceManager sm = getServiceManager();
    private static final Account owner = sm.createAccount();
    private Score veOmmScore;

    private final Account addressProvider = Account.newScoreAccount(1001);

    private static final String name = "OMM Token";
    private static final String symbol = "Omm";
    private static final int decimals = 18;
    private static final BigInteger initialSupply = BigInteger.TEN.pow(21);

    private static final String bOmmName = "Voting Escrow Omm";
    private static final String bOmmSymbol = "veOMM";


    @BeforeEach
    public void setup() throws Exception {
        veOmmScore = sm.deploy(owner, BoostedOMM.class, addressProvider.getAddress(), tokenScore.getAddress(),
                bOmmName, bOmmSymbol);
    }

    @Test
    void name() {
        assertEquals(bOmmName, veOmmScore.call("name"));
    }

    @Test
    void admin() {
        assertEquals(owner.getAddress(), veOmmScore.call("admin"));
    }

    @Test
    void futureAdmin() {
        assertNull(veOmmScore.call("futureAdmin"));
    }

    @Test
    void symbol() {
        assertEquals(bOmmSymbol, veOmmScore.call("symbol"));
    }

    @Test
    void decimals() {
        assertEquals(decimals, veOmmScore.call("decimals"));
    }

    @Test
    void totalSupply() {
        assertEquals(BigInteger.ZERO, veOmmScore.call("totalSupply", BigInteger.ZERO));
    }

}
